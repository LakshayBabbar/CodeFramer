[
    {
        "name": "python",
        "code": "def main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "name": "javascript",
        "code": "class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    greet() {\n        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n    }\n}\n\nconst person = new Person('Alice', 25);\nperson.greet();"
    },
    {
        "name": "cpp",
        "code": "#include <iostream>\n#include <vector>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n    Person(std::string n, int a) : name(n), age(a) {}\n    void introduce() {\n        std::cout << \"Hello, my name is \" << name << \" and I am \" << age << \" years old.\" << std::endl;\n    }\n};\n\nint main() {\n    Person p(\"Alice\", 25);\n    p.introduce();\n    return 0;\n}"
    },
    {
        "name": "c",
        "code": "#include <stdio.h>\n#include <string.h>\n\nstruct Person {\n    char name[50];\n    int age;\n};\n\nvoid introduce(struct Person p) {\n    printf(\"Hello, my name is %s and I am %d years old.\\n\", p.name, p.age);\n}\n\nint main() {\n    struct Person p;\n    strcpy(p.name, \"Alice\");\n    p.age = 25;\n    introduce(p);\n    return 0;\n}"
    },
    {
        "name": "shell",
        "code": "#!/bin/sh\n\nusers=\"Alice Bob Charlie\"\nfor user in $users; do\n    echo \"Hello, my name is $user.\"\ndone"
    },
    {
        "name": "sql",
        "code": "CREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    email TEXT UNIQUE NOT NULL,\n    age INTEGER\n);\n\nINSERT INTO users (name, email, age) VALUES \n('Alice', 'alice@example.com', 25),\n('Bob', 'bob@example.com', 30),\n('Charlie', 'charlie@example.com', 35);\n\nSELECT * FROM users;"
    }
]